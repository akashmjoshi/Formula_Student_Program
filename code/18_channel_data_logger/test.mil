_pll_init:
  begin   (midx: 0)
//test.c,5 :: 		void pll_init(void)
_pll_init:
  begin   (midx: 0)
//test.c,7 :: 		CLKLOCK_bit=0;
	CLKLOCK_bit <0> <- 0   (midx: 0)
//test.c,8 :: 		PORTG=0xffff;
	W0 <2> <- 65535   (midx: 0)
	PORTG <2> <- W0   (midx: 0)
//test.c,9 :: 		Hi(OSCCON)=0x78;
	W1 <2> <- addr(OSCCON+1)   (midx: 0)
	W0 <1> <- 120   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,10 :: 		Hi(OSCCON)=0x9A;
	W1 <2> <- addr(OSCCON+1)   (midx: 0)
	W0 <1> <- 154   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,11 :: 		OSCCONbits.NOSC=0x03;
	W0 <2> <- 768   (midx: 0)
	W1 <2> <- W0   (midx: 0)
	W0 <2> <- addr(OSCCONbits+0)   (midx: 0)
	W1 <2> <-  W1 ^ [W0]   (midx: 1)
	W0 <2> <- 1792   (midx: 0)
	W1 <2> <-  W1 & W0   (midx: 1)
	W0 <2> <- addr(OSCCONbits+0)   (midx: 0)
	W1 <2> <-  [W0] ^ W1   (midx: 1)
	OSCCONbits+0 <2> <- W1   (midx: 1)
//test.c,12 :: 		Lo(OSCCON)=0x46;
	W1 <2> <- addr(OSCCON)   (midx: 0)
	W0 <1> <- 70   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,13 :: 		Lo(OSCCON)=0x57;
	W1 <2> <- addr(OSCCON)   (midx: 0)
	W0 <1> <- 87   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,14 :: 		CLKDIVbits.PLLPRE=0;
	W0 <2> <- addr(CLKDIVbits+0)   (midx: 0)
	W1 <1> <- [W0]   (midx: 0)
	W0 <1> <- -32   (midx: 0)
	W1 <1> <-  W1 & W0   (midx: 0)
	W0 <2> <- addr(CLKDIVbits+0)   (midx: 0)
	[W0] <1> <- W1   (midx: 0)
//test.c,15 :: 		CLKDIVbits.PLLPOST=0;
	W0 <2> <- addr(CLKDIVbits+0)   (midx: 0)
	W1 <1> <- [W0]   (midx: 0)
	W0 <1> <- -193   (midx: 0)
	W1 <1> <-  W1 & W0   (midx: 0)
	W0 <2> <- addr(CLKDIVbits+0)   (midx: 0)
	[W0] <1> <- W1   (midx: 0)
//test.c,16 :: 		PLLFBDbits.PLLDIV=0x1E;
	W0 <2> <- 30   (midx: 0)
	W1 <2> <- W0   (midx: 0)
	W0 <2> <- addr(PLLFBDbits+0)   (midx: 0)
	W1 <2> <-  W1 ^ [W0]   (midx: 1)
	W0 <2> <- 511   (midx: 0)
	W1 <2> <-  W1 & W0   (midx: 1)
	W0 <2> <- addr(PLLFBDbits+0)   (midx: 0)
	W1 <2> <-  [W0] ^ W1   (midx: 1)
	PLLFBDbits+0 <2> <- W1   (midx: 1)
//test.c,17 :: 		OSWEN_bit=1;
	OSWEN_bit <0> <- 1   (midx: 0)
//test.c,18 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//test.c,19 :: 		while(OSWEN_bit==1);
1:   (midx: 0)
	if (!OSWEN_bit) then goto 2   (midx: 18)
	goto	1   (midx: 0)
2:   (midx: 0)
//test.c,20 :: 		PORTG=0x2000;
	W0 <2> <- 8192   (midx: 0)
	PORTG <2> <- W0   (midx: 0)
//test.c,21 :: 		while(LOCK_bit==0);
3:   (midx: 0)
	if (LOCK_bit) then goto 4   (midx: 18)
	goto	3   (midx: 0)
4:   (midx: 0)
  end
   (midx: 0)
_chop:
  begin   (midx: 0)
//test.c,24 :: 		void chop(unsigned int y)
_chop:
  begin   (midx: 0)
//test.c,30 :: 		a=y;
   (midx: 0)
	W3 <2> <- FARG_chop_y   (midx: 0)
//test.c,31 :: 		b=a/10;
	W2 <2> <- 10   (midx: 0)
	W0 <2> <-  FARG_chop_y / W2   (midx: 1)
   (midx: 0)
	W6 <2> <- W0   (midx: 0)
//test.c,32 :: 		c=a%10;
	W2 <2> <- 10   (midx: 0)
   (midx: 0)
	W0 <2> <-  W3 mod W2   (midx: 1)
   (midx: 0)
	W3 <2> <- W0   (midx: 0)
//test.c,33 :: 		d=b/10;
	W2 <2> <- 10   (midx: 0)
	W0 <2> <-  W6 / W2   (midx: 1)
   (midx: 0)
	W5 <2> <- W0   (midx: 0)
//test.c,34 :: 		e=b%10;
	W2 <2> <- 10   (midx: 0)
   (midx: 0)
	W0 <2> <-  W6 mod W2   (midx: 1)
   (midx: 0)
	W6 <2> <- W0   (midx: 0)
//test.c,35 :: 		f=d/10;
	W2 <2> <- 10   (midx: 0)
	W0 <2> <-  W5 / W2   (midx: 1)
   (midx: 0)
	W7 <2> <- W0   (midx: 0)
//test.c,36 :: 		p=d%10;
	W2 <2> <- 10   (midx: 0)
   (midx: 0)
	W0 <2> <-  W5 mod W2   (midx: 1)
   (midx: 0)
	W2 <2> <- W0   (midx: 0)
//test.c,38 :: 		Lo(U1TXREG)=f+48;
	W1 <1> <- 48   (midx: 0)
	W0 <2> <- addr(U1TXREG)   (midx: 0)
   (midx: 0)
	[W0] <1> <-  W7 + W1  [Optimized To Dest]   (midx: 1)
	U1TXREG <1> <- U1TXREG   (midx: 0)
//test.c,40 :: 		delay_ms(7);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//test.c,41 :: 		Lo(U1TXREG)=p+48;
	W1 <1> <- 48   (midx: 0)
	W0 <2> <- addr(U1TXREG)   (midx: 0)
   (midx: 0)
	[W0] <1> <-  W2 + W1  [Optimized To Dest]   (midx: 1)
	U1TXREG <1> <- U1TXREG   (midx: 0)
//test.c,43 :: 		delay_ms(7);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//test.c,44 :: 		Lo(U1TXREG)=e+48;
	W1 <1> <- 48   (midx: 0)
	W0 <2> <- addr(U1TXREG)   (midx: 0)
   (midx: 0)
	[W0] <1> <-  W6 + W1  [Optimized To Dest]   (midx: 1)
	U1TXREG <1> <- U1TXREG   (midx: 0)
//test.c,46 :: 		delay_ms(7);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//test.c,47 :: 		Lo(U1TXREG)=c+48;
	W1 <1> <- 48   (midx: 0)
	W0 <2> <- addr(U1TXREG)   (midx: 0)
   (midx: 0)
	[W0] <1> <-  W3 + W1  [Optimized To Dest]   (midx: 1)
	U1TXREG <1> <- U1TXREG   (midx: 0)
//test.c,49 :: 		delay_ms(7);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//test.c,50 :: 		Lo(U1TXREG)='\t';
	W1 <2> <- addr(U1TXREG)   (midx: 0)
	W0 <1> <- 9   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,52 :: 		delay_ms(7);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
  end
   (midx: 0)
_main:
  begin   (midx: 0)
//test.c,63 :: 		void main()
_main:
  begin   (midx: 0)
//test.c,72 :: 		TRISG=0x0000;
	W10 <2> <- PUSH(W10)   (midx: 0)
	W11 <2> <- PUSH(W11)   (midx: 0)
	TRISG <2> <- 0   (midx: 0)
//test.c,73 :: 		TRISD.B0=1;
	TRISD <0> <- 1   (midx: 17)
//test.c,75 :: 		ADC1_Init_Advanced(_ADC_12bit, _ADC_INTERNAL_REF);
	W11 <2> <- 0   (midx: 0)
	W10 <2> <- 1   (midx: 0)
	CALL _ADC1_Init_Advanced   (midx: 0)
//test.c,76 :: 		pll_init();
	CALL _pll_init   (midx: 0)
//test.c,77 :: 		UART2_Init(9600);
	W10 <4> <- 9600   (midx: 0)
	CALL _UART2_Init   (midx: 0)
//test.c,78 :: 		UART1_Init(57600);
	W10 <4> <- 57600   (midx: 0)
	CALL _UART1_Init   (midx: 0)
//test.c,79 :: 		UART2_Write('E');
	W10 <2> <- 69   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,80 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,81 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//test.c,82 :: 		PORTG=0x4000;
	W0 <2> <- 16384   (midx: 0)
	PORTG <2> <- W0   (midx: 0)
//test.c,83 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//test.c,84 :: 		UART2_Write_Text("IPA");
	W10 <2> <- #?lstr1_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,85 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,86 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//test.c,87 :: 		UART2_Write_Text("ECS");
	W10 <2> <- #?lstr2_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,88 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,89 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//test.c,91 :: 		UART2_Write_Text("SBD ");
	W10 <2> <- #?lstr3_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,92 :: 		UART2_Write_Text("$0D0000");
	W10 <2> <- #?lstr4_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,93 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,94 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//test.c,95 :: 		UART2_Init(230400);
	W10 <4> <- 230400   (midx: 0)
	CALL _UART2_Init   (midx: 0)
//test.c,97 :: 		PORTG=0xf000;
	W0 <2> <- 61440   (midx: 0)
	PORTG <2> <- W0   (midx: 0)
//test.c,99 :: 		while(1)
15:   (midx: 0)
//test.c,102 :: 		while(RD0_bit);
17:   (midx: 0)
	if (!RD0_bit) then goto 18   (midx: 0)
	goto	17   (midx: 0)
18:   (midx: 0)
//test.c,104 :: 		UART2_Write_Text("OPW TEST.csv");
	W10 <2> <- #?lstr5_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,105 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,107 :: 		c=0;
	W0 <4> <- 0   (midx: 0)
	W3 <4> <- W0   (midx: 0)
//test.c,109 :: 		while(c<100)
19:   (midx: 0)
	W1 <4> <- 100   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	if ( W1 <= [W0]) then goto 20   (midx: 5)
//test.c,112 :: 		j=0;
	W0 <2> <- 0   (midx: 0)
	W5 <2> <- W0   (midx: 0)
//test.c,115 :: 		a = ADC1_Get_Sample(0);
	W10 <2> <- 0   (midx: 0)
	CALL _ADC1_Get_Sample   (midx: 0)
   (midx: 0)
	W2 <4> <- W0   (midx: 0)
//test.c,116 :: 		y=0.024*a;
   (midx: 0)
	W0 <4> <- (type cast)W2   (midx: 0)
	W0 <4> <-  2.400000E-002 * W0   (midx: 7)
//test.c,117 :: 		IntToStr(y,txt);
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	FLOC_main+82 <2> <- W2   (midx: 0)
	W0 <2> <- (type cast)W0   (midx: 0)
	W1 <2> <- FLOC_main+82   (midx: 0)
	W11 <2> <- W1   (midx: 0)
	W10 <2> <- W0   (midx: 0)
	CALL _IntToStr   (midx: 0)
//test.c,118 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	W6 <2> <- 0   (midx: 0)
	W3 <2> <- W6   (midx: 0)
21:   (midx: 0)
   (midx: 0)
	if ( W3 >= 6) then goto 22   (midx: 1)
//test.c,120 :: 		txt1[j]=txt[i];
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,121 :: 		txt2[j]=txt[i];
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,118 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
	W6 <2> <-  W3 + 1   (midx: 1)
	W1 <2> <- W5   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,122 :: 		}
   (midx: 0)
	W3 <2> <- W6   (midx: 0)
	goto	21   (midx: 0)
22:   (midx: 0)
//test.c,123 :: 		txt2[j]='\t';
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 9   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,124 :: 		txt1[j]  =',';
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 44   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,125 :: 		j++;
	W1 <2> <- W5   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,130 :: 		a = ADC1_Get_Sample(1);
	W10 <2> <- 1   (midx: 0)
	CALL _ADC1_Get_Sample   (midx: 0)
   (midx: 0)
	W2 <4> <- W0   (midx: 0)
//test.c,131 :: 		y=0.024*a;
   (midx: 0)
	W0 <4> <- (type cast)W2   (midx: 0)
	W0 <4> <-  2.400000E-002 * W0   (midx: 7)
//test.c,132 :: 		IntToStr(y,txt);
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	FLOC_main+82 <2> <- W2   (midx: 0)
	W0 <2> <- (type cast)W0   (midx: 0)
	W1 <2> <- FLOC_main+82   (midx: 0)
	W11 <2> <- W1   (midx: 0)
	W10 <2> <- W0   (midx: 0)
	CALL _IntToStr   (midx: 0)
//test.c,134 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	W6 <2> <- 0   (midx: 0)
	W3 <2> <- W6   (midx: 0)
24:   (midx: 0)
   (midx: 0)
	if ( W3 >= 6) then goto 25   (midx: 1)
//test.c,136 :: 		txt1[j]=txt[i];
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,137 :: 		txt2[j]=txt[i];
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,134 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
	W6 <2> <-  W3 + 1   (midx: 1)
	W1 <2> <- W3   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,138 :: 		}
   (midx: 0)
	W3 <2> <- W6   (midx: 0)
	goto	24   (midx: 0)
25:   (midx: 0)
//test.c,139 :: 		txt2[j]='\t';
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 9   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,140 :: 		txt1[j]  =',';
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 44   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,141 :: 		j++;
	W1 <2> <- W3   (midx: 0)
	W0 <2> <- addr(W6)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,144 :: 		a = ADC1_Get_Sample(4);
	W10 <2> <- 4   (midx: 0)
	CALL _ADC1_Get_Sample   (midx: 0)
   (midx: 0)
	W2 <4> <- W0   (midx: 0)
//test.c,145 :: 		z=a*a;
	W2 <4> <- PUSH(W2)   (midx: 255)
	W0 <4> <-  W2 * W2   (midx: 5)
	W2 <4> <- POP   (midx: 255)
	W2 <4> <- PUSH(W2)   (midx: 255)
	W0 <4> <- (type cast)W0   (midx: 0)
	W2 <4> <- POP   (midx: 255)
//test.c,146 :: 		y=0.0000031*z-0.038*a+130;
	W2 <4> <- PUSH(W2)   (midx: 255)
	W0 <4> <-  3.100000E-006 * W0   (midx: 7)
	W2 <4> <- POP   (midx: 255)
	FLOC_main+82 <4> <- W0   (midx: 0)
   (midx: 0)
	W0 <4> <- (type cast)W2   (midx: 0)
	FLOC_main+74 <4> <-  3.800000E-002 * W0   (midx: 7)
	FLOC_main+74 <4> <- W0   (midx: 0)
	W2 <4> <- FLOC_main+74   (midx: 0)
	W0 <4> <- FLOC_main+82   (midx: 0)
	W0 <4> <-  W0 - W2   (midx: 7)
	W2 <4> <- 1.300000E+002   (midx: 0)
	W0 <4> <-  W0 + W2   (midx: 7)
//test.c,147 :: 		IntToStr(y,txt);
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	FLOC_main+82 <2> <- W2   (midx: 0)
	W0 <2> <- (type cast)W0   (midx: 0)
	W1 <2> <- FLOC_main+82   (midx: 0)
	W11 <2> <- W1   (midx: 0)
	W10 <2> <- W0   (midx: 0)
	CALL _IntToStr   (midx: 0)
//test.c,149 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	W3 <2> <- 0   (midx: 0)
	W3 <2> <- W3   (midx: 0)
27:   (midx: 0)
   (midx: 0)
	if ( W3 >= 6) then goto 28   (midx: 1)
//test.c,151 :: 		txt1[j]=txt[i];
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,152 :: 		txt2[j]=txt[i];
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,149 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
	W6 <2> <-  W3 + 1   (midx: 1)
	W1 <2> <- W5   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,153 :: 		}
   (midx: 0)
	W3 <2> <- W6   (midx: 0)
	goto	27   (midx: 0)
28:   (midx: 0)
//test.c,154 :: 		txt2[j]='\t';
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 9   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,155 :: 		txt1[j]  =',';
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 44   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,156 :: 		j++;
	W1 <2> <- W5   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,160 :: 		a = ADC1_Get_Sample(3);
	W10 <2> <- 3   (midx: 0)
	CALL _ADC1_Get_Sample   (midx: 0)
   (midx: 0)
	W2 <4> <- W0   (midx: 0)
//test.c,161 :: 		y=2.9*a;
   (midx: 0)
	W0 <4> <- (type cast)W2   (midx: 0)
	W0 <4> <-  2.900000E+000 * W0   (midx: 7)
//test.c,162 :: 		IntToStr(y,txt);
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	FLOC_main+82 <2> <- W2   (midx: 0)
	W0 <2> <- (type cast)W0   (midx: 0)
	W1 <2> <- FLOC_main+82   (midx: 0)
	W11 <2> <- W1   (midx: 0)
	W10 <2> <- W0   (midx: 0)
	CALL _IntToStr   (midx: 0)
//test.c,164 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	W6 <2> <- 0   (midx: 0)
	W3 <2> <- W6   (midx: 0)
30:   (midx: 0)
   (midx: 0)
	if ( W3 >= 6) then goto 31   (midx: 1)
//test.c,166 :: 		txt1[j]=txt[i];
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W2 <2> <- addr(main_txt_L0)   (midx: 0)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,167 :: 		txt2[j]=txt[i];
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <2> <-  W2 + W3   (midx: 1)
	[W1] <1> <- [W0]   (midx: 0)
//test.c,164 :: 		for(i=0;i<6;i++,j++)
   (midx: 0)
   (midx: 0)
	W6 <2> <-  W3 + 1   (midx: 1)
	W1 <2> <- W5   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	[W0] <2> <-  W1 + 1   (midx: 1)
//test.c,168 :: 		}
   (midx: 0)
	W3 <2> <- W6   (midx: 0)
	goto	30   (midx: 0)
31:   (midx: 0)
//test.c,169 :: 		txt2[j]='\t';
	W1 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 9   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,170 :: 		txt1[j]  ='\n';
	W1 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <- addr(W5)   (midx: 0)
	W1 <2> <-  W1 + [W0]   (midx: 1)
	W0 <1> <- 10   (midx: 0)
	[W1] <1> <- W0   (midx: 0)
//test.c,175 :: 		while(RD0_bit);
33:   (midx: 0)
	if (!RD0_bit) then goto 34   (midx: 0)
	goto	33   (midx: 0)
34:   (midx: 0)
//test.c,177 :: 		PORTG=0x1000;
	W0 <2> <- 4096   (midx: 0)
	PORTG <2> <- W0   (midx: 0)
//test.c,179 :: 		UART2_Write_Text("WRF 28");
	W10 <2> <- #?lstr6_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,180 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,181 :: 		for(i=0;i<28;i++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	W1 <2> <- 0   (midx: 0)
	W1 <2> <- W1   (midx: 0)
35:   (midx: 0)
   (midx: 0)
	if ( W1 >= 28) then goto 36   (midx: 1)
//test.c,183 :: 		UART2_Write(txt1[i]);
	W0 <2> <- addr(main_txt1_L0)   (midx: 0)
	W0 <2> <-  W0 + W1   (midx: 1)
	W10 <2> <- [W0]   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,184 :: 		UART1_Write(txt2[i]);
	W0 <2> <- addr(main_txt2_L0)   (midx: 0)
	W0 <2> <-  W0 + W1   (midx: 1)
	W10 <2> <- [W0]   (midx: 0)
	CALL _UART1_Write   (midx: 0)
//test.c,181 :: 		for(i=0;i<28;i++)
   (midx: 0)
   (midx: 0)
	W3 <2> <-  W1 + 1   (midx: 1)
//test.c,185 :: 		}
   (midx: 0)
	W1 <2> <- W3   (midx: 0)
	goto	35   (midx: 0)
36:   (midx: 0)
//test.c,186 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,188 :: 		c++;
	W1 <4> <- W1   (midx: 0)
	W0 <2> <- addr(W3)   (midx: 0)
	[W0] <4> <-  W1 + 1   (midx: 2)
//test.c,190 :: 		}
	goto	19   (midx: 0)
20:   (midx: 0)
//test.c,192 :: 		while(RD0_bit);
38:   (midx: 0)
	if (!RD0_bit) then goto 39   (midx: 0)
	goto	38   (midx: 0)
39:   (midx: 0)
//test.c,194 :: 		UART2_Write_Text("CLF test.csv");
	W10 <2> <- #?lstr7_test   (midx: 0)
	CALL _UART2_Write_Text   (midx: 0)
//test.c,195 :: 		UART2_Write('\r');
	W10 <2> <- 13   (midx: 0)
	CALL _UART2_Write   (midx: 0)
//test.c,196 :: 		}
	goto	15   (midx: 0)
  end
   (midx: 0)
